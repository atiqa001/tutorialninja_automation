{"name": "test_registration_with_mandatoryfield", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: Element not found within 30 seconds: xpath='//*[@id=\"content\"]/div/div[2]/div/form/input'", "trace": "self = <pages.RegistrationPage.RegistrationPage object at 0x000001F7866A4680>, by = 'xpath', locator_value = '//*[@id=\"content\"]/div/div[2]/div/form/input'\ntimeout = 30\n\n    def get_element(self, by, locator_value, timeout=30):\n        locator_map = {\n            \"id\": By.ID,\n            \"xpath\": By.XPATH,\n            \"link_text\": By.LINK_TEXT,\n            \"partial_link_text\": By.PARTIAL_LINK_TEXT,\n            \"name\": By.NAME,\n            \"tag_name\": By.TAG_NAME,\n            \"class_name\": By.CLASS_NAME,\n            \"css_selector\": By.CSS_SELECTOR\n        }\n    \n        selenium_by = locator_map.get(by)\n        if selenium_by is None:\n            raise ValueError(f\"Unsupported locator type: {by}\")\n    \n        try:\n            wait = WebDriverWait(self.driver, timeout)\n>           return wait.until(EC.presence_of_element_located((selenium_by, locator_value)))\n\npages\\BasePage.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d7117bdfcb22cf954fb3b7e68ed85ed4\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001F786C3A480>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7468FCF65+75717]\nE       \tGetHandleVerifier [0x00007FF7468FCFC0+75808]\nE       \t(No symbol) [0x00007FF7466C8F9A]\nE       \t(No symbol) [0x00007FF74671F4C6]\nE       \t(No symbol) [0x00007FF74671F77C]\nE       \t(No symbol) [0x00007FF746772577]\nE       \t(No symbol) [0x00007FF7467473BF]\nE       \t(No symbol) [0x00007FF74676F39C]\nE       \t(No symbol) [0x00007FF746747153]\nE       \t(No symbol) [0x00007FF746710421]\nE       \t(No symbol) [0x00007FF7467111B3]\nE       \tGetHandleVerifier [0x00007FF746BFD74D+3223469]\nE       \tGetHandleVerifier [0x00007FF746BF7CF2+3200338]\nE       \tGetHandleVerifier [0x00007FF746C15B23+3322755]\nE       \tGetHandleVerifier [0x00007FF746916A3A+180890]\nE       \tGetHandleVerifier [0x00007FF74691E13F+211359]\nE       \tGetHandleVerifier [0x00007FF7469052B4+109332]\nE       \tGetHandleVerifier [0x00007FF746905462+109762]\nE       \tGetHandleVerifier [0x00007FF7468EBA79+4825]\nE       \tBaseThreadInitThunk [0x00007FF88B157374+20]\nE       \tRtlUserThreadStart [0x00007FF88B9FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.test_registration.TestRegisteer object at 0x000001F7865CCE30>\n\n    def test_registration_with_mandatoryfield(self):\n        home_page = HomePage(self.driver)\n        home_page.click_on_my_account_drop_menu()\n        home_page.select_registration_option()\n    \n        registration_page=RegistrationPage(self.driver)\n        registration_page.enter_first_name('Md')\n        registration_page.enter_last_name('QA')\n        registration_page.enter_email_address('tester004@gmail.com')\n        registration_page.enter_telephone('01923777612')\n        registration_page.enter_password('123456')\n        registration_page.enter_confirm_password('123456')\n        registration_page.select_privacy_policy()\n>       registration_page.click_on_continue_button()\n\ntest\\test_registration.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\RegistrationPage.py:42: in click_on_continue_button\n    self.element_click(By.XPATH, self.continue_button_xpath)\npages\\BasePage.py:20: in element_click\n    element = self.get_element(by, locator_value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.RegistrationPage.RegistrationPage object at 0x000001F7866A4680>, by = 'xpath', locator_value = '//*[@id=\"content\"]/div/div[2]/div/form/input'\ntimeout = 30\n\n    def get_element(self, by, locator_value, timeout=30):\n        locator_map = {\n            \"id\": By.ID,\n            \"xpath\": By.XPATH,\n            \"link_text\": By.LINK_TEXT,\n            \"partial_link_text\": By.PARTIAL_LINK_TEXT,\n            \"name\": By.NAME,\n            \"tag_name\": By.TAG_NAME,\n            \"class_name\": By.CLASS_NAME,\n            \"css_selector\": By.CSS_SELECTOR\n        }\n    \n        selenium_by = locator_map.get(by)\n        if selenium_by is None:\n            raise ValueError(f\"Unsupported locator type: {by}\")\n    \n        try:\n            wait = WebDriverWait(self.driver, timeout)\n            return wait.until(EC.presence_of_element_located((selenium_by, locator_value)))\n        except TimeoutException:\n>           raise TimeoutException(f\"Element not found within {timeout} seconds: {by}='{locator_value}'\")\nE           selenium.common.exceptions.TimeoutException: Message: Element not found within 30 seconds: xpath='//*[@id=\"content\"]/div/div[2]/div/form/input'\n\npages\\BasePage.py:51: TimeoutException"}, "attachments": [{"name": "log", "source": "07493b52-3ab3-487b-a5a9-70e24d05a5c0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "05c4e377-7a5a-4bd6-b02c-04a453c0ea09-attachment.txt", "type": "text/plain"}], "start": 1747716723491, "stop": 1747716758114, "uuid": "087d18b0-bf44-47af-827c-8edd890d2b09", "historyId": "eb181b67cba746e94cc725bb87d3356c", "testCaseId": "eb181b67cba746e94cc725bb87d3356c", "fullName": "test.test_registration.TestRegisteer#test_registration_with_mandatoryfield", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "TestRegisteer"}, {"name": "host", "value": "TeamOs-PC"}, {"name": "thread", "value": "10640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_registration"}]}