{"name": "test_login_without_entering_credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF67FD2EFA5+77893]\n\tGetHandleVerifier [0x00007FF67FD2F000+77984]\n\t(No symbol) [0x00007FF67FAF91BA]\n\t(No symbol) [0x00007FF67FB0F524]\n\t(No symbol) [0x00007FF67FB0DFF3]\n\t(No symbol) [0x00007FF67FB01819]\n\t(No symbol) [0x00007FF67FAFF69F]\n\t(No symbol) [0x00007FF67FB03B5C]\n\t(No symbol) [0x00007FF67FB03C2F]\n\t(No symbol) [0x00007FF67FB48D86]\n\t(No symbol) [0x00007FF67FB7712A]\n\t(No symbol) [0x00007FF67FB419E6]\n\t(No symbol) [0x00007FF67FB77340]\n\t(No symbol) [0x00007FF67FB9F07F]\n\t(No symbol) [0x00007FF67FB76F03]\n\t(No symbol) [0x00007FF67FB40328]\n\t(No symbol) [0x00007FF67FB41093]\n\tGetHandleVerifier [0x00007FF67FFE7B6D+2931725]\n\tGetHandleVerifier [0x00007FF67FFE2132+2908626]\n\tGetHandleVerifier [0x00007FF6800000F3+3031443]\n\tGetHandleVerifier [0x00007FF67FD491EA+184970]\n\tGetHandleVerifier [0x00007FF67FD5086F+215311]\n\tGetHandleVerifier [0x00007FF67FD36EC4+110436]\n\tGetHandleVerifier [0x00007FF67FD37072+110866]\n\tGetHandleVerifier [0x00007FF67FD1D479+5401]\n\tBaseThreadInitThunk [0x00007FFA8DFF7374+20]\n\tRtlUserThreadStart [0x00007FFA8EA7CC91+33]", "trace": "self = <test.test_login.TestLogin object at 0x000001B9C73A3A70>\n\n    def test_login_without_entering_credentials(self):\n        home_page = HomePage(self.driver)\n        home_page.click_on_my_account_drop_menu()\n        home_page.select_login_option()\n    \n        login_page = LoginPage(self.driver)\n        login_page.enter_email_address('')\n        login_page.enter_password('')\n        login_page.click_on_login_button()\n        expected_message = \"Warning: No match for E-Mail Address and/or Password.\"\n>       assert login_page.warning_message_for_invalid_email_and_valid_password().__contains__(expected_message)\n\ntest\\test_login.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\LoginPage.py:31: in warning_message_for_invalid_email_and_valid_password\n    return self.driver.find_element(By.XPATH,self.warning_message).text\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B9C73F9730>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...7FD1D479+5401]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA8DFF7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA8EA7CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF67FD2EFA5+77893]\nE       \tGetHandleVerifier [0x00007FF67FD2F000+77984]\nE       \t(No symbol) [0x00007FF67FAF91BA]\nE       \t(No symbol) [0x00007FF67FB0F524]\nE       \t(No symbol) [0x00007FF67FB0DFF3]\nE       \t(No symbol) [0x00007FF67FB01819]\nE       \t(No symbol) [0x00007FF67FAFF69F]\nE       \t(No symbol) [0x00007FF67FB03B5C]\nE       \t(No symbol) [0x00007FF67FB03C2F]\nE       \t(No symbol) [0x00007FF67FB48D86]\nE       \t(No symbol) [0x00007FF67FB7712A]\nE       \t(No symbol) [0x00007FF67FB419E6]\nE       \t(No symbol) [0x00007FF67FB77340]\nE       \t(No symbol) [0x00007FF67FB9F07F]\nE       \t(No symbol) [0x00007FF67FB76F03]\nE       \t(No symbol) [0x00007FF67FB40328]\nE       \t(No symbol) [0x00007FF67FB41093]\nE       \tGetHandleVerifier [0x00007FF67FFE7B6D+2931725]\nE       \tGetHandleVerifier [0x00007FF67FFE2132+2908626]\nE       \tGetHandleVerifier [0x00007FF6800000F3+3031443]\nE       \tGetHandleVerifier [0x00007FF67FD491EA+184970]\nE       \tGetHandleVerifier [0x00007FF67FD5086F+215311]\nE       \tGetHandleVerifier [0x00007FF67FD36EC4+110436]\nE       \tGetHandleVerifier [0x00007FF67FD37072+110866]\nE       \tGetHandleVerifier [0x00007FF67FD1D479+5401]\nE       \tBaseThreadInitThunk [0x00007FFA8DFF7374+20]\nE       \tRtlUserThreadStart [0x00007FFA8EA7CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "start": 1745639117751, "stop": 1745639119613, "uuid": "8f05a633-1c77-481f-995b-e18e5d93230a", "historyId": "824a2523c0d8f7048af035d4bedb394f", "testCaseId": "824a2523c0d8f7048af035d4bedb394f", "fullName": "test.test_login.TestLogin#test_login_without_entering_credentials", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "TeamOs-PC"}, {"name": "thread", "value": "8132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_login"}]}